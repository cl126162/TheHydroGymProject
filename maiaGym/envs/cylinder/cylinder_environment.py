import warnings
import sys
import os

# Navigate up to the parent directory of 'maiaGym'
maiaGym_parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, maiaGym_parent_dir)

from maiaGym.maia_env_core import MaiaFlowEnv
import numpy as np
from einops import rearrange
import gym

class CylinderBase(MaiaFlowEnv):
    def __init__(self, env_config):
        super().__init__(env_config)            
        
        # set default values if necessary
        self.generate_general_defaults()
    
    
    def get_reward(self):
        # Process all bcId entries
        rewards = []
        forces_list = []
        
        for bc_id in self.bcId:
            forces = self.maiaInterface.getForce(bc_id)
            nonDim_coefficients = self.compute_nondim_coefficients(
                forces=forces,
                density=1.0, 
                referenceVelocity=self.Ma/np.sqrt(3), 
                projectionLength=self.referenceLength/self.dX
            )
            
            reward = -np.abs(nonDim_coefficients[0]).sum() - self.omega * np.abs(nonDim_coefficients[1]).sum()
            rewards.append(reward)
            forces_list.append(forces)
        
        # Single obj_dict with list of forces
        obj_dict = {'forces': forces_list}
        
        # Return single reward for single entry, list for multiple
        return (rewards[0] if len(self.bcId) == 1 else rewards), obj_dict
    
    def generate_general_defaults(self):
        """Set default values based on Re and nDim"""
        
        # Re number for default environment configuration, if simulated Re number 
        # differs from default values in dict AND no other environment parameters are given
        self.Re_default = 200
        
        self.default_values = {
            (200, 2): {  # Defaults for Re=200, nDim=2
                'num_substeps_per_iteration': 87,
                'xMin': 1.0,
                'xMax': 8.0,
                'nXProbes': 8,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 5,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 200,
            },
            (1000, 2): {  # Defaults for Re=1000, nDim=2
                'num_substeps_per_iteration': 315,
                'xMin': 1.0,
                'xMax': 7.0,
                'nXProbes': 13,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 5,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 200,
            },
            (3900, 2): {  # Defaults for Re=3900, nDim=2
                'num_substeps_per_iteration': 3,
                'xMin': 1.0,
                'xMax': 8.0,
                'nXProbes': 4,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 3,
                'zMin': -0.75,
                'zMax': 0.75,
                'nZProbes': 3,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 150,
            },
            (200, 3): {  # Defaults for Re=200, nDim=3
                'num_substeps_per_iteration': 650,
                'xMin': 2.0,
                'xMax': 9.0,
                'nXProbes': 8,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 3,
                'zMin': -1.5,
                'zMax': 1.5,
                'nZProbes': 4,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 200,
            },
            (1000, 3): {  # Defaults for Re=1000, nDim=3
                'num_substeps_per_iteration': 500,
                'xMin': 2.0,
                'xMax': 9.0,
                'nXProbes': 8,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 3,
                'zMin': -1.5,
                'zMax': 1.5,
                'nZProbes': 4,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 200,
            },
            (3900, 3): {  # Defaults for Re=3900, nDim=3
                'num_substeps_per_iteration': 450,
                'xMin': 2.0,
                'xMax': 9.0,
                'nXProbes': 8,
                'yMin': -0.75,
                'yMax': 0.75,
                'nYProbes': 3,
                'zMin': -1.5,
                'zMax': 1.5,
                'nZProbes': 4,
                'observation_type': ['u', 'v'],
                'max_episode_steps': 200,
            }
        }

class Cylinder(CylinderBase):
    def __init__(self, env_config):
        super().__init__(env_config)
        self.numJetsInSimulation = self._getProperty(self.runTime_propertyFileData, "lbNoJets")
        
        # Cylinder default values
        self.environment_default_values = {
            (200, 2): {  # Defaults for Re=200, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': 0.066,
                'obs_loc': np.array([0.0559616386429714, 0.04692257927213527, 0.04720008960444766, 0.04885205759590506, 0.049576385314729694, 0.04935070440473601, 0.04886895643014408, 0.048730294043475134, 0.01576000491689199, 0.03142255945206966, 0.039868105719699516, 0.042939373817770146, 0.04366214294762941, 0.043729502053658754, 0.04374798319186745, 0.04412947824279682, -0.0038183220583422684, 0.024527304117648575, 0.03667283279229167, 0.03990621602911002, 0.04059429722950755, 0.04110275281425265, 0.0415206546528763, 0.04211394256441966, 0.018416067295894074, 0.0334792029968293, 0.04089135482748351, 0.04332292804654967, 0.043659714684031216, 0.04397619999017172, 0.04420509127476318, 0.04444768305019025, 0.0570253501642947, 0.048293935615142204, 0.04836594518884364, 0.04936320076617695, 0.04944309545652571, 0.049365886517497674, 0.049321821757557414, 0.0491877105940285, 0.009591149981289657, 0.008355707068035711, 0.0033164383916478384, 0.0007097311422936538, 5.9959013695985846e-05, 0.0002567297220657931, 0.00019531179913671672, 3.241580972710866e-05, 0.007945687319803222, 0.006756155359704683, 0.0020735125202996987, 0.0001756725639333837, 2.3298602793376046e-05, 0.0003862265518204041, 0.00022763740378403772, -2.3191702605390523e-05, -0.0005342518247989851, -0.0004982842168759613, -0.00026128009798189063, -0.00047035528270488375, -9.616853161660105e-05, 0.0003065740466383104, 7.548149646749162e-05, -0.0002248796896189298, -0.008075361130189033, -0.006415722201476349, -0.0021632602329955137, -0.0008930470985338209, -0.0002098597082112803, 0.00017663802718615292, -3.9355783117083725e-05, -0.0003534998702345118, -0.009932018889020629, -0.007645816431975191, -0.0031902603071612954, -0.001136819413804758, -0.00020602418178523608, 0.00012975654018502214, -4.323182749284882e-05, -0.0003317238558612676]),
                'obs_scale': np.array([0.018416420663882417, 0.019639315097352332, 0.01604289749306669, 0.014353680018115746, 0.013658199820694227, 0.01351317870910407, 0.01344997046057137, 0.013216920305510107, 0.02344571663194875, 0.019739306649304098, 0.014221953350016513, 0.012992679904399474, 0.013210843556637382, 0.013570730820119782, 0.01358939991188357, 0.013334953294238016, 0.013568346095945387, 0.01396863058787488, 0.011096967370446463, 0.011426989496504945, 0.012564574784265198, 0.013233421330251306, 0.013415218242137223, 0.013340626105813913, 0.021762172264760984, 0.018611035505535542, 0.01357491353617258, 0.012660340809923334, 0.013133087528675763, 0.013767059814378483, 0.01408251867472272, 0.014058385488778196, 0.01902525188532788, 0.018702966095984708, 0.015492154316144077, 0.014232976593333833, 0.014004427917141144, 0.014012264533735524, 0.013883843626011494, 0.013624937947969505, 0.014828734480222355, 0.021051152532566307, 0.02389856151204324, 0.02404641661000874, 0.02320961903687994, 0.022087463522018087, 0.02123050087924538, 0.020649453035986826, 0.025420311647564083, 0.03212092136979299, 0.03158523145970719, 0.029845782572985168, 0.027987471095245922, 0.026304357578053675, 0.02505377725519111, 0.02406360972209419, 0.030134349197955584, 0.038698161862931235, 0.03541377673334607, 0.032676461815353296, 0.030356530399820548, 0.028470110496673195, 0.02699841231310917, 0.025695578046194024, 0.02612338647512072, 0.03311612577939017, 0.0324817959746371, 0.030846553762294435, 0.02900472155538386, 0.027413006060482345, 0.026129459893702876, 0.024903931029293332, 0.015069239227125617, 0.022314496695421362, 0.025307077983718063, 0.025629794433749922, 0.024870721516322608, 0.024009066660806263, 0.023313585687464212, 0.022574542718813758]),
            },
            (1000, 2): {  # Defaults for Re=1000, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': 0.05,
                'obs_loc': np.array([0.06127167573935572, 0.0533132396254755, 0.05010155363931364, 0.04849046409145222, 0.04734874681183401, 0.04664700794655979, 0.04610833922775119, 0.046105914971173466, 0.046667217217164374, 0.046891007794685705, 0.046744172327063405, 0.04644677554635488, 0.046263260757572124, 0.025870766203526938, 0.0322597623546195, 0.03637307548241092, 0.038785247394855164, 0.03998607421805303, 0.04063984582629004, 0.04112796684308469, 0.041501659003568996, 0.042058476254662996, 0.042839037692894606, 0.043515460429492975, 0.04363751577549174, 0.04356378190515878, -0.0006513078417137611, 0.017822139455678787, 0.029716806766832644, 0.03574841954450888, 0.03854340164745708, 0.040578412282705624, 0.04189670017065612, 0.04270553109254188, 0.04317665192415392, 0.043455400410855244, 0.04399738074865567, 0.04453562332101515, 0.04492223469856324, 0.02361443663105288, 0.03309805146457337, 0.03846494350981665, 0.04128891440495128, 0.042752980293134235, 0.04351593142004364, 0.04392219087302587, 0.04441639050596964, 0.04476369289072207, 0.044776155503802914, 0.04502638455143247, 0.045933204659147374, 0.046581180519049414, 0.061379019095733095, 0.05388209003421842, 0.050773052085352446, 0.050490984339741724, 0.05044500528560068, 0.05032561206520338, 0.050304147542205795, 0.049950300392708945, 0.049702253345143235, 0.04945847547171756, 0.04910985278517032, 0.04888025716208329, 0.049018019163593246, 0.010594881828154995, 0.008923438485022906, 0.005521560890591491, 0.003185727722269497, 0.0019481838242692956, 0.0012231254906266665, 0.0008064610085999635, 0.000566489261777609, 0.0007171058834455856, 0.0008506868095352904, 0.0006973928605032592, 0.0006189477868424249, 0.0005138050553222863, 0.012912151954810895, 0.009397521996340754, 0.0056973069855626585, 0.003175958447406518, 0.001994294366828843, 0.0012873205581339856, 0.0008160701589841138, 0.0002931959928093338, 0.00020336641103070745, 0.0004828615778551173, 0.0006896901790753124, 0.0007029424228484436, 0.0005416251136682356, 0.0013067873183679232, 0.0009190441498178702, 0.0009000113918775765, 0.0008148448569101039, 0.0006617462315336593, 0.0003343770643409713, 0.00010204118928371085, -5.741678893576002e-05, -0.00014916143715217305, -7.82932015827679e-05, 0.0003269003144549944, 0.0005853774909483594, 0.00041892979737720285, -0.011509348356752035, -0.008585304330554827, -0.003995077931734675, -0.0014172661113053932, -0.0006593253052544503, -0.00048590990783523746, -0.00038395558583641487, -0.0005550498125126998, -0.00033544716998301584, -0.00021317323586718414, -0.00019745120133545432, 3.114717020504821e-05, 3.123238513226826e-05, -0.011111817148425344, -0.00854315698528896, -0.004854582920614499, -0.00207374782577889, -0.0009370650980293777, -0.0006451275379672483, -0.0004488885783004956, -0.0005615729408064937, -0.000338421583467208, -0.0001557674401058009, -0.0002533193307831624, -0.0003837343106692141, -0.0002029143820942005]),
                'obs_scale': np.array([0.019694396887776366, 0.022288353403741728, 0.02184849140953891, 0.0217359753746986, 0.021135125283451336, 0.021105147121518307, 0.02077069873587657, 0.02027994668849529, 0.01981579398171656, 0.01949859701943592, 0.01937144180554508, 0.019550232227305696, 0.01967226442383472, 0.03434514655900103, 0.028087831617082042, 0.022652646802443516, 0.02187762416102494, 0.0228411035427957, 0.023006015924073055, 0.02294213839184182, 0.02280893860065048, 0.022740730251975757, 0.022079628824410006, 0.02150831536288292, 0.020995810085134313, 0.020622442241436383, 0.027999213017750355, 0.025450919186699634, 0.021684198856756185, 0.02129139704115676, 0.0215216136188346, 0.022414561877803964, 0.022945423256845544, 0.02270744578383789, 0.022164482237027883, 0.02193583252283504, 0.02153946689140667, 0.02110902808280239, 0.020681443028630633, 0.03584214774295362, 0.028248679623022917, 0.02283194509459608, 0.02113251080439478, 0.021246944817472347, 0.021386267837621743, 0.02114831435221705, 0.02084480554774439, 0.021030854306247897, 0.0212700132439852, 0.02144975824259444, 0.021389108716213665, 0.021265514240130904, 0.01949266854536123, 0.01996227993169651, 0.019644816899491668, 0.01963013068722558, 0.020059687781676848, 0.020109186224964007, 0.019962042453020884, 0.019630221916088098, 0.01934146578903266, 0.01912176673695805, 0.01925651032957669, 0.01943082259449812, 0.019406349032396228, 0.019174202690771667, 0.023644092046565302, 0.026670293949155967, 0.028075936653694913, 0.028391032144927372, 0.028274274858733586, 0.02757706887564819, 0.02696286603472341, 0.026125292318979122, 0.025333653636087115, 0.02450620903348038, 0.023566229668318388, 0.02282448968708052, 0.035966473490438015, 0.03876080082246538, 0.03831029816006832, 0.036875319179355354, 0.03472439325748535, 0.03279646645717947, 0.03092864178043919, 0.029260281355539614, 0.02775583576837237, 0.026802706981415486, 0.026086778369723927, 0.025194102496775447, 0.024523968854249165, 0.04456198232083702, 0.047658871253386956, 0.04349069401395003, 0.0401159436707659, 0.03680826801471537, 0.03460213233261041, 0.032760570134542984, 0.03114074639451296, 0.029566823007699007, 0.028061560705565244, 0.026865391884851375, 0.025887285475932026, 0.025080590625609037, 0.03674859923771982, 0.03802324232162339, 0.03697791750162248, 0.0351731525587541, 0.033258651606425785, 0.03211925461488378, 0.031486092682459305, 0.03085516590807637, 0.029846589919264373, 0.02842929032432836, 0.026917482819613682, 0.02591344848564854, 0.024898615465662466, 0.018441295463033285, 0.023339770075400383, 0.025952389247607156, 0.026743366729393318, 0.026306546573820255, 0.0257146841405611, 0.025794096789898545, 0.025867694990302656, 0.025970979514149572, 0.025934302831216963, 0.025416932702939984, 0.02458284640681201, 0.023969025639266915]),
            },
            (3900, 2): {  # Defaults for Re=3900, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': None,
                'obs_loc': None,
                'obs_scale': None,
            },
            (200, 3): {  # Defaults for Re=200, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]),
                'obs_scale': np.array([0.0]),
            },
            (1000, 3): {  # Defaults for Re=1000, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]),
                'obs_scale': np.array([0.0]),
            },
            (3900, 3): {  # Defaults for Re=200, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]),
                'obs_scale': np.array([1.0]),
            },
        }
        
        # merge general default values with environment default values
        self.merge_defaults(self.environment_default_values)
        
        # set default values if necessary
        self.set_defaults()
        
        # configure observation and action space
        self.configure_observations()
        self.configure_probe_dimensions()
        self.set_observation_action_spaces()
        
        self.set_default_normalization_factors()
    
    def convert_action(self, action):
        #TODO: assert length of action input in each environment - if necessary
        maia_action_sequence = []
        
        #zero mass flux configuration - first jet must have the same jet strength as second (pointing in same direction)
        # Example [jet0:action[0], jet1:action[0], jet2:action[1], jet3:action[1], ...]
        for jetPair in range(int(self.numJetsInSimulation / 2)):
            #pairwise actuation in this configuration - not individually controlled!
            maia_action_sequence.extend([action[jetPair], -action[jetPair]])       
        
        return maia_action_sequence
        

class RotaryCylinder(CylinderBase):
    def __init__(self, env_config):
        super().__init__(env_config)
        
        # Cylinder default values
        self.environment_default_values = {
            (200, 2): {  # Defaults for Re=200, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': 0.5,
                'obs_loc': np.array([0.044834839153260794, 0.04145040000313035, 0.04210544106502618, 0.04244913900725584, 0.04377932515994747, 0.04546457932963822, 0.04618843645688267, 0.04679633484452454, 0.019569111130491743, 0.029999690583584628, 0.03475495014596464, 0.03773503388943553, 0.040611908400492565, 0.04304223011044207, 0.0444658415279356, 0.0455763973381759, 0.008644691611277717, 0.02347193521902097, 0.03079170851956835, 0.03590778587737734, 0.03920026330549822, 0.041856638750997884, 0.04405739118408039, 0.04541219512636388, 0.019199378303384338, 0.02867376212516484, 0.034103851458703885, 0.03758011268677433, 0.040418990888727094, 0.042588606852587245, 0.04452169375229914, 0.04567256208252999, 0.04425884806520839, 0.04134768720038766, 0.042071599751103216, 0.04271787293787473, 0.0437193914264189, 0.04459492897960318, 0.045551102823867255, 0.046389074744661904, 0.008333683515290133, 0.004488412728816902, 0.0024294075481638383, 0.0019062981823640152, 0.0017776141488130318, 0.0015714343276189407, 0.001150510702698344, 0.0007350411734309048, 0.007163244240346458, 0.0033345475401297107, 0.0016788534398891558, 0.0013269216675184214, 0.0008815765217078628, 0.0010307789646546097, 0.0007967349786610282, 0.0004576514702484078, -0.00044144194484243724, -0.00026931772162411315, -0.00024866130498579623, -0.0003188269393522402, -0.00018716538472749673, 0.00013456205878479465, 0.00015560063682829606, 4.229644173233668e-05, -0.006265024314859202, -0.003399262738961268, -0.002122273981450443, -0.0016333187234346897, -0.0011515243066567927, -0.0006788441288825975, -0.0004517733737670295, -0.00031949778015078547, -0.0073182757577388725, -0.004568394519868394, -0.0029767582947171846, -0.002333848261631498, -0.0017873702272837098, -0.0011775175874749481, -0.0009224639016072996, -0.0006840713962638791]),
                'obs_scale': np.array([0.024353163158052298, 0.020428270851253854, 0.018079930062992553, 0.017628381037981835, 0.016659089297141244, 0.01582256168727064, 0.015572007779676204, 0.015136951577328755, 0.02238169557006063, 0.01989135286057974, 0.01826961424204129, 0.0169431737261554, 0.016716759882335747, 0.0165784283838435, 0.0161965566285683, 0.015953268225652368, 0.01639540681833311, 0.017282891323789695, 0.01658431965189854, 0.017423691231937734, 0.017486681830371904, 0.016751418333814317, 0.01650757968166764, 0.01624133795929915, 0.021961649969483653, 0.018870313180383562, 0.018117433863187253, 0.01828042748406337, 0.017588021646458857, 0.01713035340619276, 0.016486411767738345, 0.015807935487474088, 0.024778591204327804, 0.021771817400884675, 0.020147934726968533, 0.01827800207154035, 0.01764395112826496, 0.017385538896310927, 0.016374751420683772, 0.015292849653293444, 0.025411028810904037, 0.024605885598339688, 0.023912555289093307, 0.02325111705291523, 0.022886356415118887, 0.02251196739785329, 0.021664691856751316, 0.021210173784079286, 0.03181531447786691, 0.028161480235027663, 0.02584520990600822, 0.024730816860688613, 0.023846102882735816, 0.023175982849485983, 0.022182668574614667, 0.021558694039686306, 0.03524871108298052, 0.030519960449625617, 0.027027704941058238, 0.02547963796910318, 0.024008294359605862, 0.0230058986306238, 0.022156241895277127, 0.0211508650602339, 0.03461748038244721, 0.030043411944390124, 0.026915973010652974, 0.025047058650901323, 0.023661943034260127, 0.022256003345969565, 0.021519947028553074, 0.020407604011009245, 0.028069142077613674, 0.027163509196555018, 0.02543200406422626, 0.023835750781592537, 0.02247849194627143, 0.021084442912268762, 0.020292643918849197, 0.019553328188233927]),
            },
            (1000, 2): {  # Defaults for Re=1000, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': 0.4,
                'obs_loc': np.array([0.0552958191446884, 0.05091294945831578, 0.04774996552282488, 0.047159013219795445, 0.04570689340194747, 0.04516832349865129, 0.04541580205784711, 0.04598979450621918, 0.0466495895273508, 0.04697645837139326, 0.046897871549789485, 0.046838789788508944, 0.047141617526700194, 0.026389634442693825, 0.03132423588712603, 0.03415416517627986, 0.0366878774796963, 0.038707772477148614, 0.041264349404612786, 0.04262465200796064, 0.043501248221992465, 0.04416494593783092, 0.04481638016377028, 0.045307153030297906, 0.045522792320399595, 0.04564448196410471, 0.007953311862374322, 0.018753562338391695, 0.026472465510130556, 0.030416255756215083, 0.034398754599094486, 0.036944542512847005, 0.038838919063284225, 0.040074832717867256, 0.04115223000617321, 0.042238694219405654, 0.043324964580713936, 0.04358321456812017, 0.04371045153692145, 0.022383006206393385, 0.027444190971895897, 0.030968447999521087, 0.034814446110623294, 0.03682710279779865, 0.037600643610735486, 0.038557832074395636, 0.04029932995651297, 0.04155063233805585, 0.04221847531722541, 0.04270491996769936, 0.04343017107906142, 0.04405753259270815, 0.05393279253376735, 0.049838673424530924, 0.04808284073222807, 0.047009283852252684, 0.04696738641811521, 0.04748124292284145, 0.04688087870346902, 0.04622263857989181, 0.04638486103499519, 0.04684356695107654, 0.04741096239728052, 0.048165986831079054, 0.04875375724644465, 0.0073402189823451045, 0.005604691152862618, 0.004883522031675083, 0.003333416756648193, 0.0030093910380346064, 0.0025259722463795036, 0.001663039884070943, 0.0015512378589033786, 0.0013949066717769759, 0.0012232658344904245, 0.000756026004432387, 0.0006997234565124274, 0.0004670050865999285, 0.008966121202154044, 0.005837375013426144, 0.0042346917109885645, 0.003074283700551787, 0.002652412064114257, 0.0018761422420616243, 0.0010427235254626347, 0.0005203116994686872, 0.0009506720771675389, 0.0011148280995168258, 0.0007473342783182803, 0.0004457546552385916, 0.00030363662258270195, 0.00031300459002753613, 0.00032241881348680335, 0.0009831176691535398, 0.0006226379066052055, -4.7125128722720925e-05, 6.724959128448187e-05, 0.0004226044130674072, 4.357927941091685e-05, 0.00021254212500160943, 0.00038229578509538416, 0.00032202179639301704, 0.00048796150675797366, 0.00017685044408730408, -0.00787912582628119, -0.004869876033218065, -0.0027281842532059994, -0.0018622666766162622, -0.0013555821793539082, -0.0008626279880090542, -0.0011666618650151557, -0.0010321700052309864, -0.00038601541033407154, -0.0003773673576218851, -0.00012561358960839136, 0.00019349730994657526, -0.00012468123913222216, -0.006921097339678481, -0.0049803516130826776, -0.003942357360412653, -0.0030689528940409674, -0.002027637369572514, -0.000996821938118876, -0.0011618425242995508, -0.0015066288715576948, -0.0010854684868440861, -0.0007212114514524622, -0.0005616803624566971, -0.0003974855069646792, -0.0005121920029303149]),
                'obs_scale': np.array([0.023983191907884963, 0.0214765842994276, 0.021858699704951627, 0.021097938541444313, 0.020667933431756883, 0.02060708157311425, 0.020086158596672045, 0.020333642663808275, 0.020140101789943413, 0.019499481031087226, 0.018813311055190438, 0.018721211633512612, 0.018500552786596187, 0.02613606796548231, 0.024711189513915315, 0.02272292481536355, 0.02225675412463961, 0.02180071020980983, 0.02041586887021135, 0.02031586510642155, 0.01937600612234128, 0.019081166519991446, 0.01900638706067244, 0.01889834189165614, 0.018800587742048208, 0.01845107104349652, 0.01866776559260056, 0.019751161219841412, 0.02001586028361035, 0.019852072073856426, 0.020073088419593575, 0.020064541132222856, 0.01940308616284635, 0.018768542863573916, 0.01767180130927671, 0.01688234384119292, 0.01672853457577439, 0.016615508843270625, 0.016843458625250114, 0.026051283969213627, 0.023936292172696935, 0.022088874218396132, 0.020297780763780898, 0.01930364295437448, 0.01779788891726509, 0.017832533809996255, 0.01748109901290088, 0.017470959460946994, 0.01768437418910595, 0.01721953514140233, 0.017027746920322683, 0.016972159169974365, 0.021683600156172777, 0.020574066721538747, 0.020124590155520032, 0.01994575108188064, 0.019622754559559308, 0.01911018261701788, 0.018678108115303568, 0.01914118131179985, 0.019032821729253132, 0.018351708119967836, 0.0183124255984046, 0.0185579681096164, 0.01833930117548772, 0.02778425952178861, 0.02881698539253019, 0.027348499034829405, 0.026862903234754907, 0.02501546013682483, 0.024185821520201295, 0.023198211563929146, 0.022408012493748623, 0.021744853049744307, 0.020692179124186902, 0.019997302664507232, 0.019013923147365587, 0.018519265587568046, 0.035202560528554826, 0.03164356258641919, 0.029284688328200904, 0.027770037860286412, 0.026475669524043774, 0.02612169715425461, 0.0251783268172806, 0.024061786878155515, 0.023425272156323895, 0.023157231034356147, 0.02296933666211508, 0.0216707878646105, 0.021138476093277667, 0.03383419033704189, 0.030639397604432066, 0.03111802027588166, 0.028996155262176877, 0.02913283993401377, 0.027963214257858887, 0.02663316496924117, 0.025763190648613727, 0.024692424673293755, 0.024537747360201895, 0.0249651139046697, 0.0241746510376154, 0.023581059386912132, 0.03283144198213375, 0.030004149426761786, 0.029331924389830965, 0.028930390242841785, 0.028103893324523666, 0.027270666239327095, 0.02644084993257308, 0.0260452375923918, 0.0253982221871459, 0.024486861707036497, 0.023833778846576375, 0.02368291889473374, 0.023457238710636864, 0.02667194524394775, 0.027008973026339703, 0.026395608287795247, 0.025354897805841416, 0.024300054530744946, 0.024943810117652992, 0.02388174434858071, 0.023511318001414178, 0.02369772377050763, 0.02296402015212912, 0.021993172383610177, 0.021569113661697354, 0.021340141598869555]),
            },
            (3900, 2): {  # Defaults for Re=3900, nDim=2
                'num_inputs': 1,
                'MAX_CONTROL': 0.5,
                'obs_loc': None,
                'obs_scale': None,
            }
        }
        
        # merge general default values with environment default values
        self.merge_defaults(self.environment_default_values)
        
        # set default values if necessary
        self.set_defaults()
        
        # configure observation and action space
        self.configure_observations()
        self.configure_probe_dimensions()
        self.set_observation_action_spaces()
        
        self.set_default_normalization_factors()
    
    def convert_action(self, action):        
        return action

class Cylinder_MARL(CylinderBase):
    def __init__(self, env_config):
        super().__init__(env_config)
        self.numJetsInSimulation = self._getProperty(self.runTime_propertyFileData, "lbNoJets")
        
        # Cylinder default values
        self.environment_default_values = {
            (200, 3): {  # Defaults for Re=200, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]*self.num_outputs),
                'obs_scale': np.array([0.0]*self.num_outputs),
            },
            (1000, 3): {  # Defaults for Re=1000, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]*self.num_outputs),
                'obs_scale': np.array([0.0]*self.num_outputs),
            },
            (3900, 3): {  # Defaults for Re=200, nDim=3
                'num_inputs': 2,
                'MAX_CONTROL': 0.08,
                'obs_loc': np.array([0.0]*self.num_outputs),
                'obs_scale': np.array([0.0]*self.num_outputs),
            },
        }
        
        # merge general default values with environment default values
        self.merge_defaults(self.environment_default_values)
        
        # set default values if necessary
        self.set_defaults()
        
        # configure observation and action space
        self.configure_observations()
        self.configure_probe_dimensions()
        self.set_observation_action_spaces()
        
        self.set_default_normalization_factors()
    
    def convert_action(self, action):
        #TODO: assert length of action input in each environment - if necessary
        maia_action_sequence = []
        
        #zero mass flux configuration - first jet must have the same jet strength as second (pointing in same direction)
        # Example [jet0:action[0], jet1:action[0], jet2:action[1], jet3:action[1], ...]
        for jetPair in range(int(self.numJetsInSimulation / 2)):
            #pairwise actuation in this configuration - not individually controlled!
            maia_action_sequence.extend([action[jetPair], -action[jetPair]])       
        
        return maia_action_sequence
                
            